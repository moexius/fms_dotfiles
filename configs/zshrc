#!/usr/bin/env zsh
# ============================================================================
# ZSH Configuration File - Universal Dotfiles
# ============================================================================

# ============================================================================
# ENVIRONMENT VARIABLES
# ============================================================================
export FUNCNEST=1000000
export PATH="$HOME/.local/bin:/usr/local/bin:$PATH"
export PATH="$HOME/.cargo/bin:$PATH"  # For Rust tools

# macOS specific paths
if [[ "$OSTYPE" == "darwin"* ]]; then
    export PATH="/opt/homebrew/opt/ruby/bin:$PATH"
    export PATH="$PATH:/Users/$USER/.lmstudio/bin"
fi

export EDITOR="nvim"
export LANG="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

# ============================================================================
# ZSH OPTIONS
# ============================================================================
setopt HIST_IGNORE_DUPS        # Don't record duplicate entries
setopt HIST_IGNORE_SPACE       # Don't record entries starting with space
setopt SHARE_HISTORY           # Share history between sessions
setopt APPEND_HISTORY          # Append to history file
setopt INC_APPEND_HISTORY      # Write to history file immediately
setopt HIST_REDUCE_BLANKS      # Remove superfluous blanks
setopt HIST_VERIFY             # Show command with history expansion before running
setopt AUTO_CD                 # cd by typing directory name if it's not a command
setopt CORRECT                 # Auto correct mistakes
setopt NO_CASE_GLOB           # Case insensitive globbing
setopt NUMERIC_GLOB_SORT      # Sort filenames numerically when it makes sense

# History settings
HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000

# ============================================================================
# ENVIRONMENT DETECTION
# ============================================================================
# Detect environment type
if [[ -f /.dockerenv ]] || [[ -n "${container}" ]]; then
    ENVIRONMENT="container"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    ENVIRONMENT="macos"
else
    ENVIRONMENT="linux"
fi

# Detect OS and package manager for Linux
detect_os() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        export DETECTED_OS="macos"
        export PKG_MANAGER="brew"
    elif [[ -f /etc/os-release ]]; then
        . /etc/os-release
        case $ID in
            debian|ubuntu)
                export DETECTED_OS="debian"
                export PKG_MANAGER="apt"
                ;;
            centos|rhel|rocky|almalinux)
                export DETECTED_OS="rhel"
                export PKG_MANAGER="yum"
                ;;
            fedora)
                export DETECTED_OS="fedora"
                export PKG_MANAGER="dnf"
                ;;
            opensuse*|sles)
                export DETECTED_OS="opensuse"
                export PKG_MANAGER="zypper"
                ;;
            arch|manjaro)
                export DETECTED_OS="arch"
                export PKG_MANAGER="pacman"
                ;;
            alpine)
                export DETECTED_OS="alpine"
                export PKG_MANAGER="apk"
                ;;
            *)
                export DETECTED_OS="unknown"
                export PKG_MANAGER="unknown"
                ;;
        esac
    else
        export DETECTED_OS="unknown"
        export PKG_MANAGER="unknown"
    fi
}

# Run OS detection
detect_os

# ============================================================================
# ZINIT PLUGIN MANAGER
# ============================================================================
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

# Install Zinit if not present
if [[ ! -f $ZINIT_HOME/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})‚Ä¶%f"
    command mkdir -p "$(dirname $ZINIT_HOME)" && command chmod g-rwX "$(dirname $ZINIT_HOME)"
    command git clone https://github.com/zdharma-continuum/zinit "$ZINIT_HOME" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$ZINIT_HOME/zinit.zsh"

# Load plugins with Zinit
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-history-substring-search
zinit light zsh-users/zsh-completions
zinit light marlonrichert/zsh-autocomplete

# Oh My Zsh plugins via Zinit
zinit snippet OMZP::git
zinit snippet OMZP::colored-man-pages
zinit snippet OMZP::command-not-found

# ============================================================================
# STARSHIP PROMPT CONFIGURATION
# ============================================================================
# Initialize Starship prompt
if command -v starship >/dev/null 2>&1; then
    eval "$(starship init zsh)"
    export STARSHIP_CONFIG=~/.config/starship.toml
else
    # Fallback prompt with environment indicator
    case $ENVIRONMENT in
        "container")
            PROMPT='üì¶ %F{red}%n%f in %F{green}%m%f in %F{blue}%~%f ‚ùØ '
            ;;
        "macos")
            PROMPT='üçé %F{red}%n%f in %F{green}%m%f in %F{blue}%~%f ‚ùØ '
            ;;
        *)
            PROMPT='üêß %F{red}%n%f in %F{green}%m%f in %F{blue}%~%f ‚ùØ '
            ;;
    esac
    echo "‚ö†Ô∏è  Starship not found. Install with the dotfiles installer."
fi

# ============================================================================
# FZF CONFIGURATION
# ============================================================================
# Enhanced FZF setup with better colors and options
export FZF_DEFAULT_OPTS="
    --height 40% 
    --reverse 
    --border 
    --preview-window=right:60%:wrap
    --bind='ctrl-u:preview-page-up,ctrl-d:preview-page-down,ctrl-f:preview-page-down,ctrl-b:preview-page-up'
    --color=bg+:#363a4f,bg:#24273a,spinner:#f4dbd6,hl:#ed8796
    --color=fg:#cad3f5,header:#ed8796,info:#c6a0f6,pointer:#f4dbd6
    --color=marker:#f4dbd6,fg+:#cad3f5,prompt:#c6a0f6,hl+:#ed8796"

export FZF_DEFAULT_COMMAND='fd --type f --hidden --exclude .git --exclude node_modules --exclude .DS_Store'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND='fd --type d --hidden --exclude .git --exclude node_modules --exclude .DS_Store'

# Lazy load FZF for better startup performance
fzf_init() {
    if command -v fzf >/dev/null 2>&1; then
        eval "$(fzf --zsh)"
        [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
    fi
}

# ============================================================================
# TOOL INITIALIZATION
# ============================================================================
# Lazy load zoxide for better performance
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

# iTerm2 shell integration (macOS only)
if [[ "$ENVIRONMENT" == "macos" ]]; then
    test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"
fi

# ============================================================================
# ALIAS SEARCH AND HELP SYSTEM
# ============================================================================
alias_help() {
    echo "üîç Alias Search and Help System"
    echo "================================"
    echo
    echo "Usage:"
    echo "  alias_search <term>     - Search for aliases containing term"
    echo "  alias_list [category]   - List aliases by category"
    echo "  alias_os               - Show OS-specific aliases"
    echo
    echo "Categories:"
    echo "  package    - Package management"
    echo "  system     - System information & monitoring"
    echo "  service    - Service management"
    echo "  network    - Network tools"
    echo "  file       - File operations"
    echo "  git        - Git shortcuts"
    echo "  dev        - Development tools"
    echo "  docker     - Docker commands"
    echo "  misc       - Miscellaneous"
    echo
    echo "Examples:"
    echo "  alias_search install"
    echo "  alias_list package"
    echo "  alias_os"
}

alias_search() {
    if [ $# -eq 0 ]; then
        echo "Usage: alias_search <search_term>"
        return 1
    fi
    
    echo "üîç Searching for aliases containing '$1':"
    echo "========================================"
    alias | grep -i "$1" | sort | sed 's/^/  /'
}

alias_list() {
    local category="$1"
    
    case "$category" in
        package)
            echo "üì¶ Package Management Aliases:"
            echo "=============================="
            alias | grep -E "(install|remove|update|upgrade|search|clean|brew|apt|dnf|yum|zypper|pacman|apk)" | sort | sed 's/^/  /'
            ;;
        system)
            echo "üñ•Ô∏è  System Information Aliases:"
            echo "==============================="
            alias | grep -E "(info|cpu|mem|disk|temp|battery|df|du|free|top|ps)" | sort | sed 's/^/  /'
            ;;
        service)
            echo "‚öôÔ∏è  Service Management Aliases:"
            echo "==============================="
            alias | grep -E "(start|stop|restart|status|enable|disable|systemctl|service)" | sort | sed 's/^/  /'
            ;;
        network)
            echo "üåê Network Aliases:"
            echo "=================="
            alias | grep -E "(ping|ip|port|connection|myip|localip|netstat|ss)" | sort | sed 's/^/  /'
            ;;
        file)
            echo "üìÅ File Operation Aliases:"
            echo "=========================="
            alias | grep -E "(ls|ll|la|cp|mv|rm|mkdir|tar|extract)" | sort | sed 's/^/  /'
            ;;
        git)
            echo "üîß Git Aliases:"
            echo "==============="
            alias | grep -E "git|^g[a-z]=" | sort | sed 's/^/  /'
            ;;
        dev)
            echo "üíª Development Aliases:"
            echo "======================"
            alias | grep -E "(python|pip|node|npm|serve|json|vim|nvim)" | sort | sed 's/^/  /'
            ;;
        docker)
            echo "üê≥ Docker Aliases:"
            echo "=================="
            alias | grep -E "docker|^d[a-z]=" | sort | sed 's/^/  /'
            ;;
        misc)
            echo "üîß Miscellaneous Aliases:"
            echo "========================="
            alias | grep -E "(weather|clear|history|reload|sa)" | sort | sed 's/^/  /'
            ;;
        *)
            echo "üìã Available Categories:"
            echo "======================="
            echo "  package, system, service, network, file, git, dev, docker, misc"
            echo
            echo "Use: alias_list <category>"
            ;;
    esac
}

alias_os() {
    echo "üñ•Ô∏è  Current OS: $DETECTED_OS"
    echo "üì¶ Package Manager: $PKG_MANAGER"
    echo
    echo "OS-Specific Aliases Available:"
    echo "============================="
    
    case "$DETECTED_OS" in
        macos)
            echo "  üçé macOS aliases loaded"
            alias | grep -E "(brew|darwin|mac|launchctl)" | sort | sed 's/^/    /'
            ;;
        debian)
            echo "  üêß Debian/Ubuntu aliases loaded"
            alias | grep -E "(apt|dpkg)" | sort | sed 's/^/    /'
            ;;
        fedora|rhel)
            echo "  üé© Fedora/RHEL aliases loaded"
            alias | grep -E "(dnf|yum|rpm)" | sort | sed 's/^/    /'
            ;;
        opensuse)
            echo "  ü¶é openSUSE aliases loaded"
            alias | grep -E "(zypper|yast|snap)" | sort | sed 's/^/    /'
            ;;
        arch)
            echo "  üèõÔ∏è  Arch Linux aliases loaded"
            alias | grep -E "(pacman|yay|aur)" | sort | sed 's/^/    /'
            ;;
        alpine)
            echo "  üèîÔ∏è  Alpine Linux aliases loaded"
            alias | grep -E "(apk)" | sort | sed 's/^/    /'
            ;;
        *)
            echo "  ‚ùì Unknown OS - using generic aliases"
            ;;
    esac
}

# Quick access to help
alias ah='alias_help'
alias as='alias_search'
alias al='alias_list'
alias ao='alias_os'

# ============================================================================
# UNIVERSAL ALIASES - NAVIGATION & BASIC COMMANDS
# ============================================================================
# Enhanced navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias ~="cd ~"
alias h="cd ~"
alias c="clear"
alias cls="clear"

# Better ls with lsd (with fallback)
if command -v lsd >/dev/null 2>&1; then
    alias ls="lsd"
    alias l="lsd -la"
    alias ll="lsd -l"
    alias la="lsd -la"
    alias lt="lsd --tree"
    alias lsize="lsd -lS"
else
    if [[ "$ENVIRONMENT" == "macos" ]]; then
        alias ls="ls -G"
        alias l="ls -la -G"
        alias ll="ls -l -G"
        alias la="ls -la -G"
    else
        alias ls="ls --color=auto"
        alias l="ls -la --color=auto"
        alias ll="ls -l --color=auto"
        alias la="ls -la --color=auto"
    fi
    alias lsize="ls -lhS"
fi

# File operations
alias mkdir='mkdir -pv'
alias cp='cp -iv'
alias mv='mv -iv'
alias rm='rm -iv'
alias rmf='rm -rf'
alias ln='ln -iv'

# Text processing
alias grep='grep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'
alias h='history'
alias hgrep='history | grep'
alias count='sort | uniq -c | sort -nr'

# ============================================================================
# UNIVERSAL ALIASES - SYSTEM MONITORING
# ============================================================================
alias df="df -h"
alias du="du -h"
alias dus='du -sh * | sort -hr'
alias free='free -h'
alias ps='ps aux'
alias psg='ps aux | grep -v grep | grep -i'
alias topcpu='ps auxf | sort -nr -k 3 | head -10'
alias topmem='ps auxf | sort -nr -k 4 | head -10'

# System monitoring (OS-specific)
if [[ "$ENVIRONMENT" == "macos" ]]; then
    alias cpu="top -o cpu"
    alias mem="top -o mem"
    alias ports="lsof -i -P -n | grep LISTEN"
else
    alias cpu="top -o %CPU"
    alias mem="top -o %MEM"
    alias ports="ss -tuln"
fi

# ============================================================================
# UNIVERSAL ALIASES - NETWORK
# ============================================================================
alias ping="ping -c 5"
alias myip="curl -s https://icanhazip.com && echo"

if [[ "$ENVIRONMENT" == "macos" ]]; then
    alias localip="ipconfig getifaddr en0"
    alias rwlan="networksetup -setairportpower en0 off && networksetup -setairportpower en0 on"
else
    alias localip="hostname -I | awk '{print \$1}'"
fi

alias listening='netstat -tlnp'
alias connections='netstat -an'

# ============================================================================
# UNIVERSAL ALIASES - DEVELOPMENT
# ============================================================================
# Tools with fallbacks
if command -v bat >/dev/null 2>&1; then
    alias b="bat"
elif command -v batcat >/dev/null 2>&1; then
    alias b="batcat"
else
    alias b="cat"
fi

alias t="tldr"
alias f="fzf"

# Git aliases
alias g="git"
alias gs="git status"
alias ga="git add"
alias gaa="git add --all"
alias gc="git commit"
alias gcm="git commit -m"
alias gp="git push"
alias gpl="git pull"
alias gl="git log --oneline"
alias gd="git diff"
alias gb="git branch"
alias gco="git checkout"
alias gcb="git checkout -b"
alias gm="git merge"
alias gr="git remote -v"
alias gf="git fetch"

# Development tools
alias py='python3'
alias pip='pip3'
alias serve='python3 -m http.server'
alias json='python3 -m json.tool'
alias urlencode='python3 -c "import sys, urllib.parse as ul; print(ul.quote_plus(sys.argv[1]))"'
alias urldecode='python3 -c "import sys, urllib.parse as ul; print(ul.unquote_plus(sys.argv[1]))"'

# Quick edits
alias zshrc="$EDITOR ~/.zshrc"
alias starshipconfig="$EDITOR ~/.config/starship.toml"
alias starship-config="$EDITOR ~/.config/starship.toml"

# ============================================================================
# MACOS SPECIFIC ALIASES
# ============================================================================
if [[ "$DETECTED_OS" == "macos" ]]; then
    # Homebrew aliases
    alias bo="brew outdated && echo '\nRun bg to upgrade all packages'"
    alias bu="brew update"
    alias bg="brew upgrade"
    alias bi="brew install"
    alias bs="brew search"
    alias bl="brew list"
    alias bc="brew cleanup"
    alias buc="brew update && brew cleanup"
    alias binfo="brew info"
    alias bdeps="brew deps --tree"
    alias bservices="brew services list"
    alias bstart="brew services start"
    alias bstop="brew services stop"
    alias brestart="brew services restart"
    
    # macOS system
    alias hosts="sudo $EDITOR /etc/hosts"
    alias vimrc="$EDITOR ~/.vimrc"
    alias flush="sudo dscacheutil -flushcache && sudo killall -HUP mDNSResponder"
    alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user && killall Finder"
    alias showfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
    alias hidefiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"
    alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
    alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
    
    # macOS applications
    alias safari="open -a Safari"
    alias firefox="open -a Firefox"
    alias chrome="open -a 'Google Chrome'"
    alias finder="open -a Finder"
    alias preview="open -a Preview"
    
    # GlobalProtect VPN
    alias startgp="launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*"
    alias stopgp="launchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*"
    
    # Tailscale
    alias ts="/Applications/Tailscale.app/Contents/MacOS/Tailscale"
    
    # macOS utilities
    alias battery="pmset -g batt"
    alias sleep="pmset sleepnow"
    alias lock="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
    alias screensaver="open -a ScreenSaverEngine"
fi

# ============================================================================
# DEBIAN/UBUNTU SPECIFIC ALIASES
# ============================================================================
if [[ "$DETECTED_OS" == "debian" ]]; then
    # APT package management
    alias update="sudo apt update"
    alias upgrade="sudo apt upgrade"
    alias install="sudo apt install"
    alias search="apt search"
    alias show="apt show"
    alias remove="sudo apt remove"
    alias autoremove="sudo apt autoremove"
    alias purge="sudo apt purge"
    alias clean="sudo apt clean && sudo apt autoclean"
    alias installed="apt list --installed"
    alias upgradable="apt list --upgradable"
    
    # System services
    alias sstart="sudo systemctl start"
    alias sstop="sudo systemctl stop"
    alias srestart="sudo systemctl restart"
    alias sstatus="systemctl status"
    alias senable="sudo systemctl enable"
    alias sdisable="sudo systemctl disable"
    alias sreload="sudo systemctl reload"
    alias slist="systemctl list-units --type=service"
    alias sfailed="systemctl --failed"
    
    # Logs
    alias logs="sudo journalctl -f"
    alias logsboot="sudo journalctl -b"
    alias logserr="sudo journalctl -p err"
    alias logsservice="sudo journalctl -u"
    
    # Debian/Ubuntu specific
    alias sources="sudo $EDITOR /etc/apt/sources.list"
    alias fstab="sudo $EDITOR /etc/fstab"
    alias ufw="sudo ufw"
    alias ufwstatus="sudo ufw status"
fi

# ============================================================================
# FEDORA/RHEL SPECIFIC ALIASES
# ============================================================================
if [[ "$DETECTED_OS" == "fedora" || "$DETECTED_OS" == "rhel" ]]; then
    # DNF/YUM package management
    if [[ "$PKG_MANAGER" == "dnf" ]]; then
        alias update="sudo dnf update"
        alias upgrade="sudo dnf upgrade"
        alias install="sudo dnf install"
        alias search="dnf search"
        alias info="dnf info"
        alias remove="sudo dnf remove"
        alias autoremove="sudo dnf autoremove"
        alias clean="sudo dnf clean all"
        alias history="dnf history"
        alias installed="dnf list installed"
        alias available="dnf list available"
    else
        alias update="sudo yum update"
        alias upgrade="sudo yum upgrade"
        alias install="sudo yum install"
        alias search="yum search"
        alias info="yum info"
        alias remove="sudo yum remove"
        alias clean="sudo yum clean all"
        alias history="yum history"
        alias installed="yum list installed"
        alias available="yum list available"
    fi
    
    # System services (same as Debian)
    alias sstart="sudo systemctl start"
    alias sstop="sudo systemctl stop"
    alias srestart="sudo systemctl restart"
    alias sstatus="systemctl status"
    alias senable="sudo systemctl enable"
    alias sdisable="sudo systemctl disable"
    alias sreload="sudo systemctl reload"
    alias slist="systemctl list-units --type=service"
    alias sfailed="systemctl --failed"
    
    # Logs
    alias logs="sudo journalctl -f"
    alias logsboot="sudo journalctl -b"
    alias logserr="sudo journalctl -p err"
    alias logsservice="sudo journalctl -u"
    
    # Firewall
    alias fwstatus="sudo firewall-cmd --state"
    alias fwlist="sudo firewall-cmd --list-all"
    alias fwreload="sudo firewall-cmd --reload"
fi

# ============================================================================
# OPENSUSE SPECIFIC ALIASES
# ============================================================================
if [[ "$DETECTED_OS" == "opensuse" ]]; then
    # Zypper package management
    alias zr='sudo zypper refresh'
    alias zu='sudo zypper update'
    alias zup='sudo zypper dup'
    alias zi='sudo zypper install'
    alias zs='zypper search'
    alias zinfo='zypper info'
    alias zrm='sudo zypper remove'
    alias zps='zypper ps'
    alias zpatches='sudo zypper patches'
    alias zpatch='sudo zypper patch'
    alias zrepos='zypper repos'
    alias zaddrepo='sudo zypper addrepo'
    alias zremoverepo='sudo zypper removerepo'
    alias zclean='sudo zypper clean'
    alias zhistory='zypper history'
    
    # Package management shortcuts
    alias install='sudo zypper install'
    alias remove='sudo zypper remove'
    alias search='zypper search'
    alias update='sudo zypper update'
    alias upgrade='sudo zypper dup'
    alias refresh='sudo zypper refresh'
    
    # System services
    alias sstart='sudo systemctl start'
    alias sstop='sudo systemctl stop'
    alias srestart='sudo systemctl restart'
    alias sstatus='systemctl status'
    alias senable='sudo systemctl enable'
    alias sdisable='sudo systemctl disable'
    alias sreload='sudo systemctl reload'
    alias slist='systemctl list-units --type=service'
    alias sfailed='systemctl --failed'
    
    # Logs
    alias logs='sudo journalctl -f'
    alias logsboot='sudo journalctl -b'
    alias logserr='sudo journalctl -p err'
    alias logsservice='sudo journalctl -u'
    
    # openSUSE specific tools
    alias yast='sudo yast2'
    alias yastnet='sudo yast2 lan'
    alias yastuser='sudo yast2 users'
    alias yastsoft='sudo yast2 sw_single'
    alias yastboot='sudo yast2 bootloader'
    
    # Snapper (Btrfs snapshots)
    alias snaplist='sudo snapper list'
    alias snapcreate='sudo snapper create -d'
    alias snapdelete='sudo snapper delete'
    alias snapstatus='sudo snapper status'
    
    # Firewall
    alias fwstatus='sudo firewall-cmd --state'
    alias fwlist='sudo firewall-cmd --list-all'
    alias fwreload='sudo firewall-cmd --reload'
fi

# ============================================================================
# ARCH LINUX SPECIFIC ALIASES
# ============================================================================
if [[ "$DETECTED_OS" == "arch" ]]; then
    # Pacman package management
    alias update="sudo pacman -Sy"
    alias upgrade="sudo pacman -Syu"
    alias install="sudo pacman -S"
    alias search="pacman -Ss"
    alias info="pacman -Si"
    alias remove="sudo pacman -R"
    alias removeall="sudo pacman -Rns"
    alias clean="sudo pacman -Sc"
    alias cleanall="sudo pacman -Scc"
    alias installed="pacman -Q"
    alias orphans="pacman -Qdt"
    alias removeorphans="sudo pacman -Rns \$(pacman -Qtdq)"
    
    # AUR helpers (if available)
    if command -v yay >/dev/null 2>&1; then
        alias yayupdate="yay -Syu"
        alias yayinstall="yay -S"
        alias yaysearch="yay -Ss"
        alias yayremove="yay -R"
        alias yayclean="yay -Sc"
    fi
    
    # System services
    alias sstart="sudo systemctl start"
    alias sstop="sudo systemctl stop"
    alias srestart="sudo systemctl restart"
    alias sstatus="systemctl status"
    alias senable="sudo systemctl enable"
    alias sdisable="sudo systemctl disable"
    alias sreload="sudo systemctl reload"
    alias slist="systemctl list-units --type=service"
    alias sfailed="systemctl --failed"
    
    # Logs
    alias logs="sudo journalctl -f"
    alias logsboot="sudo journalctl -b"
    alias logserr="sudo journalctl -p err"
    alias logsservice="sudo journalctl -u"
fi

# ============================================================================
# ALPINE LINUX SPECIFIC ALIASES
# ============================================================================
if [[ "$DETECTED_OS" == "alpine" ]]; then
    # APK package management
    alias update="sudo apk update"
    alias upgrade="sudo apk upgrade"
    alias install="sudo apk add"
    alias search="apk search"
    alias info="apk info"
    alias remove="sudo apk del"
    alias clean="sudo apk cache clean"
    alias installed="apk info -vv | sort"
    
    # Alpine specific
    alias services="rc-status"
    alias addservice="sudo rc-update add"
    alias delservice="sudo rc-update del"
    alias startservice="sudo rc-service"
    alias stopservice="sudo rc-service"
fi

# ============================================================================
# DOCKER ALIASES (Universal)
# ============================================================================
if command -v docker >/dev/null 2>&1; then
    alias dps='docker ps'
    alias dpsa='docker ps -a'
    alias di='docker images'
    alias dstop='docker stop $(docker ps -q)'
    alias drm='docker rm $(docker ps -aq)'
    alias drmi='docker rmi $(docker images -q)'
    alias dprune='docker system prune -af'
    alias dlog='docker logs'
    alias dexec='docker exec -it'
    alias dbuild='docker build'
    alias drun='docker run'
    alias dpull='docker pull'
    alias dpush='docker push'
fi

# ============================================================================
# FLATPAK ALIASES (Universal Linux)
# ============================================================================
if command -v flatpak >/dev/null 2>&1; then
    alias fplist='flatpak list'
    alias fpinstall='flatpak install'
    alias fpremove='flatpak uninstall'
    alias fpupdate='flatpak update'
    alias fpsearch='flatpak search'
    alias fprun='flatpak run'
fi

# ============================================================================
# MISCELLANEOUS ALIASES
# ============================================================================
alias now='date +"%T"'
alias nowdate='date +"%d-%m-%Y"'
alias path='echo -e ${PATH//:/\\n}'
alias j='jobs -l'
alias reload='source ~/.zshrc'
alias sa='source ~/.zshrc && echo "üöÄ ZSH configuration reloaded successfully!"'

# Weather
alias weather='curl wttr.in'
alias weatherlocal='curl wttr.in/$(curl -s ipinfo.io/city 2>/dev/null)'

# ============================================================================
# UNIVERSAL FUNCTIONS
# ============================================================================

# Create directory and navigate to it
function mkcd() {
    if [ $# -ne 1 ]; then
        echo "Usage: mkcd <directory_name>"
        return 1
    fi
    mkdir -p "$1" && cd "$1"
}

# Quick weather check
function weather() {
    local city="${1:-Madrid}"
    curl -s "wttr.in/${city}?format=3"
}

# Enhanced system information with environment detection
function sysinfo() {
    local icon
    case $ENVIRONMENT in
        "container") icon="üì¶" ;;
        "macos") icon="üçé" ;;
        *) icon="üêß" ;;
    esac
    
    echo "$icon System Information ($ENVIRONMENT)"
    echo "================================"
    echo "OS: $(uname -s) $(uname -r)"
    echo "Architecture: $(uname -m)"
    echo "Hostname: $(hostname)"
    
    if [[ "$ENVIRONMENT" == "macos" ]]; then
        echo "macOS Version: $(sw_vers -productVersion)"
        echo "Uptime: $(uptime | awk '{print $3,$4}' | sed 's/,//')"
        echo "Load Average: $(uptime | awk -F'load average:' '{print $2}')"
        echo "Memory Usage:"
        vm_stat | head -4
        if command -v brew >/dev/null 2>&1; then
            echo "Homebrew Packages: $(brew list --formula | wc -l | xargs) formulas, $(brew list --cask | wc -l | xargs) casks"
        fi
    else
        echo "Uptime: $(uptime -p 2>/dev/null || uptime)"
        echo "Load: $(uptime | awk -F'load average:' '{print $2}')"
        echo "Memory:"
        free -h 2>/dev/null || echo "Memory info not available"
    fi
    
    echo "Disk Usage:"
    df -h | head -5
    
    echo "Shell Tools:"
    echo "  ZSH: $(zsh --version 2>/dev/null || echo 'Not available')"
    echo "  Starship: $(starship --version 2>/dev/null | head -1 || echo 'Not available')"
    echo "  fzf: $(fzf --version 2>/dev/null || echo 'Not available')"
    echo "  zoxide: $(zoxide --version 2>/dev/null || echo 'Not available')"
    echo "  lsd: $(lsd --version 2>/dev/null || echo 'Not available')"
    # Properly detect bat/batcat
    if command -v bat >/dev/null 2>&1; then
        echo "  bat: $(bat --version 2>/dev/null | head -1 || echo 'Error getting version')"
    elif command -v batcat >/dev/null 2>&1; then
        echo "  bat: $(batcat --version 2>/dev/null | head -1 || echo 'Error getting version')"
    else
        echo "  bat: Not available"
    fi
}

# Find and kill process by name with fzf
function killp() {
    if [ $# -eq 0 ]; then
        echo "Usage: killp <process_name_pattern>"
        return 1
    fi
    
    local pid
    pid=$(ps aux | grep -i "$1" | grep -v grep | 
          fzf --prompt="Select process to kill: " \
              --preview="echo {}" \
              --preview-window=up:3:wrap | 
          awk '{print $2}')
    
    if [ -n "$pid" ]; then
        echo "Killing process $pid..."
        kill -9 "$pid" && echo "Process killed successfully" || echo "Failed to kill process"
    fi
}

# Extract various archive formats
function extract() {
    if [ $# -ne 1 ]; then
        echo "Usage: extract <archive_file>"
        return 1
    fi
    
    if [ -f "$1" ]; then
        # Get the filename without path and extension
        local filename=$(basename "$1")
        local folder_name="${filename%.*}"
        
        # For files with double extensions like .tar.gz, .tar.bz2, etc.
        case "$filename" in
            *.tar.gz|*.tar.bz2|*.tar.xz|*.tar.lzma)
                folder_name="${filename%.tar.*}"
                ;;
            *.tar.*)
                folder_name="${filename%.tar.*}"
                ;;
        esac
        
        # Handle existing directories
        local counter=1
        local original_folder_name="$folder_name"
        while [ -d "$folder_name" ]; do
            folder_name="${original_folder_name}_${counter}"
            ((counter++))
        done
        
        # Create the extraction directory
        mkdir -p "$folder_name"
        
        echo "Extracting '$1' to folder '$folder_name'..."
        
        case "$1" in
            *.tar.bz2)   tar xjf "$1" -C "$folder_name" ;;
            *.tar.gz)    tar xzf "$1" -C "$folder_name" ;;
            *.bz2)       
                cp "$1" "$folder_name/"
                (cd "$folder_name" && bunzip2 "$(basename "$1")")
                ;;
            *.rar)       unrar x "$1" "$folder_name/" ;;
            *.gz)        
                cp "$1" "$folder_name/"
                (cd "$folder_name" && gunzip "$(basename "$1")")
                ;;
            *.tar)       tar xf "$1" -C "$folder_name" ;;
            *.tbz2)      tar xjf "$1" -C "$folder_name" ;;
            *.tgz)       tar xzf "$1" -C "$folder_name" ;;
            *.zip)       unzip "$1" -d "$folder_name" ;;
            *.Z)         
                cp "$1" "$folder_name/"
                (cd "$folder_name" && uncompress "$(basename "$1")")
                ;;
            *.7z)        7z x "$1" -o"$folder_name" ;;
            *.xz)        
                cp "$1" "$folder_name/"
                (cd "$folder_name" && unxz "$(basename "$1")")
                ;;
            *.lzma)      
                cp "$1" "$folder_name/"
                (cd "$folder_name" && unlzma "$(basename "$1")")
                ;;
            *)           
                echo "Error: '$1' cannot be extracted via extract()"
                rmdir "$folder_name" 2>/dev/null  # Remove empty directory
                return 1
                ;;
        esac
        
        if [ $? -eq 0 ]; then
            echo "Successfully extracted to '$folder_name/'"
        else
            echo "Error occurred during extraction"
            return 1
        fi
    else
        echo "Error: '$1' is not a valid file"
        return 1
    fi
}

# Find files by name with fzf
function ff() {
    local file
    file=$(find . -type f 2>/dev/null | fzf --prompt="Find file: " --preview="head -20 {}")
    [ -n "$file" ] && echo "$file"
}

# Find directories with fzf
function fd_dir() {
    local dir
    dir=$(find . -type d 2>/dev/null | fzf --prompt="Find directory: ")
    [ -n "$dir" ] && cd "$dir"
}

# Git branch switcher with fzf
function fzf_git_branch() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "Not in a git repository"
        return 1
    fi
    
    local branch
    branch=$(git branch -a | grep -v HEAD | sed 's/^..//' | sed 's/remotes\///' | 
             sort -u | fzf --prompt="Switch to branch: ")
    
    if [ -n "$branch" ]; then
        git checkout "$branch"
    fi
}

# Docker container management
function docker_exec() {
    if ! command -v docker >/dev/null 2>&1; then
        echo "Docker not installed"
        return 1
    fi
    
    local container
    container=$(docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}" | 
                fzf --header-lines=1 --prompt="Select container: " | 
                awk '{print $1}')
    
    if [ -n "$container" ]; then
        docker exec -it "$container" /bin/bash || docker exec -it "$container" /bin/sh
    fi
}

# OS-specific functions
if [[ "$DETECTED_OS" == "opensuse" ]]; then
    # Function to search and install packages in one command
    zinstall() {
        if [ $# -eq 0 ]; then
            echo "Usage: zinstall <search_term>"
            return 1
        fi
        
        echo "Searching for packages containing '$1'..."
        zypper search "$1"
        echo
        read -p "Enter package name to install (or press Enter to cancel): " package
        if [ -n "$package" ]; then
            sudo zypper install "$package"
        fi
    }
    
    # Function to show package information and dependencies
    zshow() {
        if [ $# -eq 0 ]; then
            echo "Usage: zshow <package_name>"
            return 1
        fi
        
        zypper info "$1"
        echo
        echo "Dependencies:"
        zypper info --requires "$1"
    }
    
    # Function to clean up system
    cleanup() {
        echo "Cleaning package cache..."
        sudo zypper clean -a
        
        echo "Removing orphaned packages..."
        sudo zypper packages --orphaned
        
        echo "Cleaning journal logs older than 2 weeks..."
        sudo journalctl --vacuum-time=2weeks
        
        echo "Cleanup completed!"
    }
fi

# ============================================================================
# FZF ENHANCED FUNCTIONS
# ============================================================================
# History search with fzf
function fzf_history() {
    local selected
    selected=$(history | fzf --tac --no-sort --height 40% --reverse --border | sed 's/^[ ]*[0-9]*[ ]*//')
    if [ -n "$selected" ]; then
        print -z "$selected"
    fi
}

# Bind Ctrl+R to fzf history search
bindkey '^R' fzf_history
zle -N fzf_history

# ============================================================================
# KEY BINDINGS
# ============================================================================
# History substring search bindings (if plugin is loaded)
if [[ -n "${functions[_zsh_highlight]}" ]]; then
    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down
    bindkey '^P' history-substring-search-up
    bindkey '^N' history-substring-search-down
fi

# Better word navigation
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word

# ============================================================================
# COMPLETION SETTINGS
# ============================================================================
# Enable completion
autoload -Uz compinit
compinit

# Case insensitive completion
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Colored completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# Menu selection
zstyle ':completion:*' menu select

# Group matches and describe
zstyle ':completion:*:*:*:*:descriptions' format '%F{green}-- %d --%f'
zstyle ':completion:*' group-name ''

# ============================================================================
# LOCAL CUSTOMIZATIONS
# ============================================================================
# Source local customizations if they exist
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

# ============================================================================
# STARTUP MESSAGE
# ============================================================================
case $ENVIRONMENT in
    "container")
        echo "üì¶ Container ZSH loaded successfully!"
        ;;
    "macos")
        echo "üçé macOS ZSH loaded successfully!"
        ;;
    *)
        echo "üêß Linux ZSH loaded successfully!"
        ;;
esac
echo "üí° Type 'sysinfo' for system info, 'sa' to reload config"
echo "üîç Type 'ah' for alias help, 'as <term>' to search aliases"