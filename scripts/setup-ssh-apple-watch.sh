#!/bin/bash

# SSH Apple Watch Authentication Setup Script
# Part of dotfiles configuration

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SSH_KEY_NAME="id_ecdsa_se"
SSH_DIR="$HOME/.ssh"
SSH_KEY_PATH="$SSH_DIR/$SSH_KEY_NAME"
SSH_CONFIG="$SSH_DIR/config"
PRIVATE_ZSHRC="$HOME/.zshrc_private"

# Get dotfiles directory
DOTFILES_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# Parse server definitions from private zshrc
parse_servers_from_zshrc() {
    declare -gA SERVERS
    
    if [[ ! -f "$PRIVATE_ZSHRC" ]]; then
        print_error "Private zshrc not found at $PRIVATE_ZSHRC"
        print_error "Please run the main install.sh first to create the private configuration"
        exit 1
    fi
    
    print_status "Parsing SSH server definitions from $PRIVATE_ZSHRC..."
    
    # Extract SSH aliases from the private zshrc
    # Look for patterns like: alias servername='ssh user@ip'
    while IFS= read -r line; do
        if [[ $line =~ ^alias\ ([^=]+)=\'ssh\ ([^@]+)@([^\']+)\' ]]; then
            local alias_name="${BASH_REMATCH[1]}"
            local user="${BASH_REMATCH[2]}"
            local host="${BASH_REMATCH[3]}"
            
            # Only include root user SSH aliases (assuming your servers use root)
            if [[ "$user" == "root" ]]; then
                SERVERS["$alias_name"]="$host"
                print_status "Found server: $alias_name -> $host"
            fi
        fi
    done < "$PRIVATE_ZSHRC"
    
    if [[ ${#SERVERS[@]} -eq 0 ]]; then
        print_warning "No SSH server aliases found in $PRIVATE_ZSHRC"
        print_warning "Expected format: alias servername='ssh root@ip.address'"
        exit 1
    fi
    
    print_success "Found ${#SERVERS[@]} servers in private configuration"
}

# Rest of your existing functions...
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# ... (keep all your existing functions: check_macos, check_apple_watch, etc.)

# Update the create_ssh_config function to use parsed servers:
create_ssh_config() {
    print_status "Creating SSH configuration..."
    
    # Create the config content with parsed servers
    cat > "$SSH_CONFIG" << EOF
# Generated by dotfiles setup-ssh-apple-watch.sh
# $(date)

# Server definitions (from private configuration)
$(for host in "${!SERVERS[@]}"; do
    echo "Host $host"
    echo "    HostName ${SERVERS[$host]}"
    echo "    User root"
    echo ""
done)

# Global settings for Apple Watch authentication
Host *
    UseKeychain yes
    AddKeysToAgent yes
    IdentityFile ~/.ssh/$SSH_KEY_NAME
    ServerAliveInterval 60
    ServerAliveCountMax 3
EOF

    chmod 600 "$SSH_CONFIG"
    print_success "SSH config created with ${#SERVERS[@]} servers"
}

# Update the main function to call parse_servers_from_zshrc:
main() {
    echo -e "${BLUE}"
    echo "╔══════════════════════════════════════════════════════════╗"
    echo "║          SSH Apple Watch Authentication Setup            ║"
    echo "║                    Dotfiles Integration                  ║"
    echo "╚══════════════════════════════════════════════════════════╝"
    echo -e "${NC}"
    
    check_macos
    check_apple_watch
    parse_servers_from_zshrc  # Add this line
    create_ssh_directory
    backup_ssh_config
    generate_ssh_key
    add_key_to_agent
    create_ssh_config
    create_aliases
    
    echo
    read -p "Copy SSH keys to all servers now? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        copy_keys_to_servers
        echo
        read -p "Test all connections? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            test_connections
        fi
    fi
    
    echo
    print_success "Setup complete! 🍎⌚"
    echo
    echo -e "${YELLOW}Next steps:${NC}"
    echo "1. Try connecting: ssh tinypc"
    echo "2. Your Apple Watch should prompt for authentication"
    echo
    echo -e "${YELLOW}Manual key copying (if needed):${NC}"
    for host in "${!SERVERS[@]}"; do
        echo "  ssh-copy-id -i $SSH_KEY_PATH.pub $host"
    done
}

# Run the script
main "$@"